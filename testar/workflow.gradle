/**
 * Tasks to test TESTAR using gradle
 */
 
task init_workflow_test(type: Copy) {
    group = 'test_testar_workflow'
    description ='init_workflow_test'
    from 'resources/workflow/settings'
    into 'target/scripts/settings'
}

// Execute a protocol to test that the GUI starts correctly
task runTestRunGUI(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestRunGUI'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_run_gui AlwaysCompile=true ShowVisualSettingsDialogOnStartup=false'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("Saved current settings")}) {
            println "\n${output} \nTESTAR GUI launched successfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Launching TESTAR GUI")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad, execute 2 actions and verdict should be OK
task runTestDesktopGenericCommandLineOk(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineOk'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_ok" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2 OnlySaveFaultySequences=true'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad and check that waitAndLeftClickWidgetWithMatchingTags feature works
task runTestDesktopGenericMultiTags(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericMultiTags'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic_multitags AlwaysCompile=true ApplicationName="notepad_multitags" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=1'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad
// Test TagsForSuspiciousOracle feature using the UIATags.UIAAutomationId
// Force TESTAR to find a Suspicious Tag (MenuBar widget)
// And verify it reading output command line
task runTestDesktopGenericCommandLineSuspiciousTag(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_command_and_suspicious" TagsForSuspiciousOracle="NotExist;UIAAutomationId;Role" SuspiciousTags=".*MenuBar.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2 OnlySaveFaultySequences=true'
    doLast {
        String output = standardOutput.toString()

		// Verify MenuBar UIAAutomationId has been detected
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'UIAAutomationId' : 'MenuBar")}) {
            println "\n${output} \nTESTAR has successfully detected MenuBar Suspicious Tag using TagsForSuspiciousOracle UIAAutomationId! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt detect MenuBar Suspicious Tag using TagsForSuspiciousOracle UIAAutomationId")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad
// Test TagsToFilter feature using the Tag.Desc
// Then force TESTAR to navigate and find a Suspicious Tag Title Error (Script text)
// And verify it reading output command line
task runTestDesktopGenericCommandLineSettingsFilterSuspiciousTag(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineSettingsFilterSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_command_settings_filter_and_suspicious" TagsToFilter="NotExist;Desc" ClickFilter=".*[sS]ystem.*|.*[cC]lose.*|.*[mM]inimize.*|.*[mM]aximize.*|Text Editor|File|Edit|View|Help|Word Wrap" SuspiciousTags=".*[sS]cript.*" TimeToWaitAfterAction=2.0 ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Verify Script tag has been detected
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Script")}) {
            println "\n${output} \nTESTAR has successfully filtered using TagsToFilter Desc and detected Script Suspicious Tag! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt filter using TagsToFilter Desc")
        }
    }
}

// Help task to run Notepad before start TESTAR (to connect with process or title)
task runNotepad {
    group = 'test_testar_workflow'
    description ='runNotepad'
    doFirst{
        ext.process = new ProcessBuilder().command('cmd', '/c', 'C:\\Windows\\System32\\notepad.exe').start()
    }
}

// Verify that TESTAR correctly connects using process name
// To be sure, connect to process and detect Format suspicious tag Title
task runTestDesktopGenericProcessNameSuspiciousTag(type: Exec, dependsOn:['installDist','runNotepad']) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericProcessNameSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_process_and_suspicious" SuspiciousTags=".*[fF]ormat.*|.*[fF]ormato.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=SUT_PROCESS_NAME SUTConnectorValue="notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Format (for English and Spanish)
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Format")}) {
            println "\n${output} \nTESTAR has successfully connect with SUT_PROCESS_NAME and detected Format Suspicious Tag! "
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
        } else {
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with SUT_PROCESS_NAME")
        }
    }
}

// Verify that TESTAR correctly connects using windows title
// To be sure, connect with windows title and detect Format suspicious tag Title
task runTestDesktopGenericTitleNameSuspiciousTag(type: Exec, dependsOn:['installDist','runNotepad']) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericTitleNameSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_title_and_suspicious" SuspiciousTags=".*[fF]ormat.*|.*[fF]ormato.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=SUT_WINDOW_TITLE SUTConnectorValue="Notepad" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Format (for English and Spanish)
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Format")}) {
            println "\n${output} \nTESTAR has successfully connect with SUT_WINDOW_TITLE and detected Format Suspicious Tag! "
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
        } else {
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with SUT_WINDOW_TITLE")
        }
    }
}

// Download OrientDB 3.0.34 from the official wep page
task downloadOrientDB(type: Download, dependsOn: installDist) {
    src 'https://repo1.maven.org/maven2/com/orientechnologies/orientdb-community/3.0.34/orientdb-community-3.0.34.zip'
    dest 'target/install/testar/bin'
    overwrite false
}
// Verify that we downloaded the correct OrientDB file
task verifyOrientDB(type: Verify, dependsOn: downloadOrientDB) {
    src new File(downloadOrientDB.dest, 'orientdb-community-3.0.34.zip')
    algorithm 'MD5'
    checksum '37a87c9c8b3ed3778f6103b15c7e184b'
}
// Extract OrientDB binary files
task downloadAndUnzipOrientDB(type: Copy, dependsOn: verifyOrientDB) {
    group = 'test_testar_workflow'
    description ='downloadAndUnzipOrientDB'
    
    // Disable for non-Windows environments (Linux, osx)
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        return;
    }
    
    from zipTree(new File(downloadOrientDB.dest, 'orientdb-community-3.0.34.zip'))
    into downloadOrientDB.dest
}
// Execute a command line to create a testar OrientDB database with admin admin credentials
task createDatabaseOrientDB(type: Exec, dependsOn: downloadAndUnzipOrientDB){
    group = 'test_testar_workflow'
    description ='createDatabaseOrientDB'
    
    // Disable for non-Windows environments (Linux, osx)
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        return;
    }
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir 'target/install/testar/bin/orientdb-community-3.0.34/bin'
    commandLine 'cmd', '/c', 'console.bat CREATE DATABASE plocal:../databases/testar admin admin'
    // Ignore errors creating the database because we check the output buffer message
    ignoreExitValue true
    doLast {
        String output = standardOutput.toString()
        
        // If error creating database because already exists is ok
        if (execResult.getExitValue()==1 && errorOutput.toString().contains("Cannot create new database 'testar' because it already exists")) {
            println "\n${output} \ntestar OrientDB database already exists"
        }
        // Check if testar database created sucessfully
        else if(output.readLines().any{line->line.contains("Database created successfully.")}) {
            println "\n${output} \ntestar OrientDB database created successfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Creating testar OrientDB database")
        }
    }
}
// Verify that TESTAR infers a State Model with Notepad
// Filter lot of actions and detect Font action inference
task runTestDesktopGenericStateModel(type: Exec, dependsOn: createDatabaseOrientDB) {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericStateModel'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic_statemodel AlwaysCompile=true ApplicationName="notepad_state_model" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2 TimeToWaitAfterAction=2.0 ClickFilter=".*[sS]ystem.*|.*[cC]lose.*|.*[mM]inimize.*|.*[mM]aximize.*|Text Editor|File|Edit|View|Help|Word Wrap" StateModelEnabled=true DataStoreDB=testar DataStoreUser=admin DataStorePassword=admin'
    doLast {
        String output = standardOutput.toString()

        // Check that State Model was calculating the execution path
        // This is not only to check that the model is enabled, but also to check the model action selection mechanism
        if(output.readLines().any{line->line.contains("New execution path")}) {
            println "\n${output} \nTESTAR State Model is enabled and calculates the execution path"
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR State Model does NOT calculate the execution path")
        }

        // Check that output contains 3 abstract states in the State Model inference
        if(output.readLines().any{line->line.contains("3 abstract states in the model")}) {
            println "\n${output} \nTESTAR State Model has been inferred sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Inferring TESTAR State Model")
        }
    }
}

// Verify that TESTAR can custom the widget and actions identifiers 
// Infer a State Model modifying the state and action identifiers
task runTestDesktopGenericStateModelCustomAbstraction(type: Exec, dependsOn: createDatabaseOrientDB) {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericStateModelCustomAbstraction'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic_custom_abstraction AlwaysCompile=true ApplicationName="notepad_state_model_custom" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=1'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains 0 unvisited actions left
        if(output.contains("0 unvisited actions left")) {
            println "\n${output} \nTESTAR Action AbstractIDCustom has been customized sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: with Action AbstractIDCustom custom identifier")
        }
    }
}

// Windows OS
// Verify that TESTAR correctly executes chromedriver
// To be sure, connect to ou.nl and detect Onderwijs suspicious tag ValuePattern
task runTestWebdriverSuspiciousTag(type: Exec) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_generic AlwaysCompile=true ApplicationName="webdriver_and_suspicious" TagsForSuspiciousOracle="NotExist;ValuePattern" SuspiciousTags=".*[oO]nderwijs.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Onderwijs
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'ValuePattern' : 'https://www.ou.nl/onderwijs")}) {
            println "\n${output} \nTESTAR has successfully connect with WEB_DRIVER and detected Onderwijs Suspicious Tag! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with WEB_DRIVER")
        }
    }
}

// Linux OS
task runTestWebdriverSuspiciousTagUbuntu(type: Exec) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverSuspiciousTagUbuntu'
    workingDir 'target/install/testar/bin'
    commandLine 'bash', '-c', './testar sse=test_gradle_workflow_webdriver_generic SUTConnectorValue=" ""/usr/local/share/chromedriver-linux64/chromedriver"" ""https://www.ou.nl"" " FlashFeedback=false AlwaysCompile=true ApplicationName="webdriver_and_suspicious" TagsForSuspiciousOracle="NotExist;ValuePattern" SuspiciousTags=".*[oO]nderwijs.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Onderwijs
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'ValuePattern' : 'https://www.ou.nl/onderwijs")}) {
            println "\n${output} \nTESTAR has successfully connect with WEB_DRIVER and detected Onderwijs Suspicious Tag! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with WEB_DRIVER")
        }
    }
}

// macOS: Verify that TESTAR correctly executes chromedriver
task runTestWebdriverSuspiciousTagMacOS(type: Exec) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverSuspiciousTagMacOS'
    workingDir 'target/install/testar/bin'
    commandLine 'bash', '-c', './testar sse=test_gradle_workflow_webdriver_generic SUTConnectorValue=" ""/usr/local/share/chromedriver-mac-x64/chromedriver"" ""https://www.ou.nl"" " FlashFeedback=false AlwaysCompile=true ApplicationName="webdriver_and_suspicious" TagsForSuspiciousOracle="NotExist;ValuePattern" SuspiciousTags=".*[oO]nderwijs.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Onderwijs
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'ValuePattern' : 'https://www.ou.nl/onderwijs")}) {
            println "\n${output} \nTESTAR has successfully connect with WEB_DRIVER and detected Onderwijs Suspicious Tag! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with WEB_DRIVER")
        }
    }
}

// Connect to para.testar.org, make a login and detect the browser console error message
task runTestWebdriverParabankLoginAndConsoleError(type: Exec) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverParabankLoginAndConsoleError'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_parabank AlwaysCompile=true ApplicationName="webdriver_login_console_error" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=1 ProtocolSpecificSetting_1=john ProtocolSpecificSetting_2=demo WebConsoleErrorOracle=true'
    doLast {
        String output = standardOutput.toString()

		// Check that output detects the browser console error message
        if(output.readLines().any{line->line.contains("Failed to load resource: the server responded with a status of 404")}) {
            println "\n${output} \nTESTAR login and browser console error detection has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Connect to para.testar.org and use form filling to login
task runTestWebdriverParabankFormFilling(type: Exec) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverParabankFormFilling'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_form_filling AlwaysCompile=true ApplicationName="webdriver_form_filling" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=1'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR form filling login has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Interact with para.testar.org executing webdriver remote actions
task runTestWebdriverParabankRemoteActions(type: Exec) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverParabankRemoteActions'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_remote_parabank AlwaysCompile=true ApplicationName="webdriver_remote_actions" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=1 ProtocolSpecificSetting_1=john ProtocolSpecificSetting_2=demo TagsToFilter=WebHref ClickFilter="^(?!(.*sitemap.*)$).*$"'
    doLast {
        String output = standardOutput.toString()

		// Check that output detects the browser console error message
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR webdriver remote acitons were executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Verify that TESTAR correctly replays a sequence
task runTestWebdriverCorrectReplay(type: Exec) {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverCorrectReplay'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_replay AlwaysCompile=true ApplicationName="webdriver_replay" ShowVisualSettingsDialogOnStartup=false Mode=Replay SUTConnectorValue=" ""C:\\\\SeleniumWebDrivers\\\\ChromeDriver\\\\chromedriver.exe"" ""settings/test_gradle_workflow_webdriver_replay/similar_menu_replayable.html"" " PathToReplaySequence=./settings/test_gradle_workflow_webdriver_replay/t_jone_p_ptwo_p.testar'
    doLast {
        String output = standardOutput.toString()

        // Check that output contains Sequence successfully replayed message to verify the correct replay execution
        if(output.readLines().any{line->line.contains("Sequence successfully replayed")}) {
            println "\n${output} \nTESTAR sequence has been sucessfully replayed"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR Replay mode")
        }
    }
}

// Verify that TESTAR correctly detects a not replayable sequence
task runTestWebdriverUnreplayable(type: Exec) {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverUnreplayable'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_replay AlwaysCompile=true ApplicationName="webdriver_unreplayable" ShowVisualSettingsDialogOnStartup=false Mode=Replay SUTConnectorValue=" ""C:\\\\SeleniumWebDrivers\\\\ChromeDriver\\\\chromedriver.exe"" ""settings/test_gradle_workflow_webdriver_replay/similar_menu_unreplayable.html"" " PathToReplaySequence=./settings/test_gradle_workflow_webdriver_replay/t_jone_p_ptwo_p.testar'
    doLast {
        String output = standardOutput.toString()

        // Check that TESTAR detects not replayable button
        if(output.readLines().any{line->line.contains("Left Click at 'ParisTwo' of the replayed sequence can not been replayed")}) {
            println "\n${output} \nTESTAR has sucessfully detected a not replayable sequence"
        } else {
            throw new GradleException("\n${output} \nERROR: Detecting not replayable button with TESTAR Replay mode")
        }
    }
}
