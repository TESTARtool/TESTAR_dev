/**
 * Tasks to test TESTAR Windows desktop using gradle
 */

// Execute a protocol to test that the GUI starts correctly
task runTestRunGUI(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestRunGUI'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_run_gui AlwaysCompile=true ShowVisualSettingsDialogOnStartup=false'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("Saved current settings")}) {
            println "\n${output} \nTESTAR GUI launched successfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Launching TESTAR GUI")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad, execute 2 actions and verdict should be OK
task runTestDesktopGenericCommandLineOk(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineOk'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_ok" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2 OnlySaveFaultySequences=true'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad and check that waitAndLeftClickWidgetWithMatchingTags feature works
task runTestDesktopGenericMultiTags(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericMultiTags'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic_multitags AlwaysCompile=true ApplicationName="notepad_multitags" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=1'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad
// Test TagsForSuspiciousOracle feature using the UIATags.UIAAutomationId
// Force TESTAR to find a Suspicious Tag (MenuBar widget)
// And verify it reading output command line
task runTestDesktopGenericCommandLineSuspiciousTag(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_command_and_suspicious" TagsForSuspiciousOracle="NotExist;UIAAutomationId;Role" SuspiciousTags=".*MenuBar.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2 OnlySaveFaultySequences=true'
    doLast {
        String output = standardOutput.toString()

		// Verify MenuBar UIAAutomationId has been detected
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'UIAAutomationId' : 'MenuBar")}) {
            println "\n${output} \nTESTAR has successfully detected MenuBar Suspicious Tag using TagsForSuspiciousOracle UIAAutomationId! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt detect MenuBar Suspicious Tag using TagsForSuspiciousOracle UIAAutomationId")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad
// Test TagsToFilter feature using the Tag.Desc
// Then force TESTAR to navigate and find a Suspicious Tag Title Error (Script text)
// And verify it reading output command line
task runTestDesktopGenericCommandLineSettingsFilterSuspiciousTag(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineSettingsFilterSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_command_settings_filter_and_suspicious" TagsToFilter="NotExist;Desc" ClickFilter=".*[sS]ystem.*|.*[cC]lose.*|.*[mM]inimize.*|.*[mM]aximize.*|Text Editor|File|Edit|View|Help|Word Wrap" SuspiciousTags=".*[sS]cript.*" TimeToWaitAfterAction=9.9 ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Verify Script tag has been detected
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Script")}) {
            println "\n${output} \nTESTAR has successfully filtered using TagsToFilter Desc and detected Script Suspicious Tag! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt filter using TagsToFilter Desc")
        }
    }
}

// Help task to run Notepad before start TESTAR (to connect with process or title)
task runNotepad {
    group = 'test_testar_workflow'
    description ='runNotepad'
    doFirst{
        ext.process = new ProcessBuilder().command('cmd', '/c', 'C:\\Windows\\System32\\notepad.exe').start()
    }
}

// Verify that TESTAR correctly connects using process name
// To be sure, connect to process and detect Format suspicious tag Title
task runTestDesktopGenericProcessNameSuspiciousTag(type: Exec, dependsOn:['installDist','runNotepad']) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericProcessNameSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_process_and_suspicious" SuspiciousTags=".*[fF]ormat.*|.*[fF]ormato.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=SUT_PROCESS_NAME SUTConnectorValue="notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Format (for English and Spanish)
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Format")}) {
            println "\n${output} \nTESTAR has successfully connect with SUT_PROCESS_NAME and detected Format Suspicious Tag! "
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
        } else {
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with SUT_PROCESS_NAME")
        }
    }
}

// Verify that TESTAR correctly connects using windows title
// To be sure, connect with windows title and detect Format suspicious tag Title
task runTestDesktopGenericTitleNameSuspiciousTag(type: Exec, dependsOn:['installDist','runNotepad']) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericTitleNameSuspiciousTag'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_title_and_suspicious" SuspiciousTags=".*[fF]ormat.*|.*[fF]ormato.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=SUT_WINDOW_TITLE SUTConnectorValue="Notepad" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Format (for English and Spanish)
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Format")}) {
            println "\n${output} \nTESTAR has successfully connect with SUT_WINDOW_TITLE and detected Format Suspicious Tag! "
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
        } else {
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with SUT_WINDOW_TITLE")
        }
    }
}

// Verify TESTAR JavaAccessBridge works with SwingSet2 Java Swing app
task unzipSwingSet2Jar(type: Copy) {
    dependsOn installDist

    def jarFile = file('target/install/testar/bin/suts/SwingSet2.jar')
    def outputDir = file('target/install/testar/bin/suts/SwingSet2')

    from zipTree(jarFile)
    into outputDir
}
task runTestDesktopJavaSwing(type: Exec, dependsOn: ['installDist', 'unzipSwingSet2Jar']) {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopJavaSwing'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_java_swing AlwaysCompile=true ApplicationName="java_swing_ok" ShowVisualSettingsDialogOnStartup=false AccessBridgeEnabled=true Mode=Generate Sequences=1 SequenceLength=1 OnlySaveFaultySequences=true TagsToFilter="Title;ToolTipText;UIAAutomationId" ClickFilter="^(?!(.*[mM]enu.*|.*[fF]ile.*)$).*$"'
    doLast {
        String output = standardOutput.toString()
        // Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Verify that TESTAR infers a State Model with Notepad
// Filter lot of actions and detect Font action inference
task runTestDesktopGenericStateModel(type: Exec, dependsOn: createDatabaseOrientDB) {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericStateModel'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic_statemodel AlwaysCompile=true ApplicationName="notepad_state_model" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2 ClickFilter=".*[sS]ystem.*|.*Sistema.*|.*[cC]lose.*|.*Cerrar.*|.*[mM]inimize.*|.*Minimizar.*|.*[mM]aximize.*|.*Maximizar.*|Text Editor|.*Editor.*|File|.*Archivo.*|Edit|.*Edici.*|View|.*Ver.*|Help|.*Ayuda.*|Word Wrap|.*Ajuste.*" StateModelEnabled=true DataStoreDB=testar DataStoreUser=admin DataStorePassword=admin'
    doLast {
        String output = standardOutput.toString()

        // Check that State Model was calculating the execution path
        // This is not only to check that the model is enabled, but also to check the model action selection mechanism
        if(output.readLines().any{line->line.contains("New execution path")}) {
            println "\n${output} \nTESTAR State Model is enabled and calculates the execution path"
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR State Model does NOT calculate the execution path")
        }

        // Check that output contains 3 abstract states in the State Model inference
        if(output.readLines().any{line->line.contains("3 abstract states in the model")}) {
            println "\n${output} \nTESTAR State Model has been inferred sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Inferring TESTAR State Model")
        }
    }
}

// Verify that TESTAR can custom the widget and actions identifiers 
// Infer a State Model modifying the state and action identifiers
task runTestDesktopGenericStateModelCustomAbstraction(type: Exec, dependsOn: createDatabaseOrientDB) {
    // Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericStateModelCustomAbstraction'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic_custom_abstraction AlwaysCompile=true ApplicationName="notepad_state_model_custom" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=1'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains 0 unvisited actions left
        if(output.contains("0 unvisited actions left")) {
            println "\n${output} \nTESTAR Action AbstractID has been customized sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: with Action AbstractID custom identifier")
        }
    }
}
