package org.testar.statemodel.analysis.condition;

import org.testar.statemodel.StateModelManager;

/*
 Conditions are used to evaluate whether a test goal was reached when testing with LLMs.
 This is done by querying the state model generated by Testar.
 */
public abstract class TestCondition {
    private StateCondition.ConditionComparator comparator;
    private int threshold;

    /**
     * Creates a new TestCondition.
     * @param comparator The result of the query is compared to the threshold value using the selected operator.
     * @param threshold The result of the query is compared to this value.
     */
    public TestCondition(StateCondition.ConditionComparator comparator, int threshold) {
        this.comparator = comparator;
        this.threshold = threshold;
    }

    /**
     * Comparator used to compare the result of the query to the threshold.
     */
    public enum ConditionComparator {
        GREATER_THAN,
        EQUAL,
        LESS_THAN,
        GREATER_THAN_EQUALS,
        LESS_THAN_EQUALS
    }

    /**
     * Gets the selected operator.
     * @return Selected operator.
     */
    public StateCondition.ConditionComparator getComparator() {
        return comparator;
    }

    /**
     * Gets the threshold value.
     * @return Set threshold.
     */
    public int getThreshold() {
        return threshold;
    }

    /**
     * Evaluates whether this condition is true.
     * @param modelIdentifier modelIdentifier of the current test sequence.
     * @param stateModelManager stateModelManager of the current test sequence.
     * @return True if condition is met.
     */
    public abstract boolean evaluate(String modelIdentifier, StateModelManager stateModelManager);
}
