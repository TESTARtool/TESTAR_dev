/***************************************************************************************************
 *
 * Copyright (c) 2024 - 2025 Universitat Politecnica de Valencia - www.upv.es
 * Copyright (c) 2024 - 2025 Open Universiteit - www.ou.nl
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************************************/

package org.testar.statemodel.analysis.condition;

import org.testar.statemodel.StateModelManager;

/**
 Conditions are used to evaluate whether a test goal was reached when testing with LLMs.
 This is done by querying the state model generated by TESTAR.
 */
public abstract class TestCondition {
    private StateCondition.ConditionComparator comparator;
    private int threshold;

    /**
     * Creates a new TestCondition.
     * @param comparator The result of the query is compared to the threshold value using the selected operator.
     * @param threshold The result of the query is compared to this value.
     */
    public TestCondition(StateCondition.ConditionComparator comparator, int threshold) {
        this.comparator = comparator;
        this.threshold = threshold;
    }

    /**
     * Comparator used to compare the result of the query to the threshold.
     */
    public enum ConditionComparator {
        GREATER_THAN,
        EQUAL,
        LESS_THAN,
        GREATER_THAN_EQUALS,
        LESS_THAN_EQUALS
    }

    /**
     * Gets the selected operator.
     * @return Selected operator.
     */
    public StateCondition.ConditionComparator getComparator() {
        return comparator;
    }

    /**
     * Gets the threshold value.
     * @return Set threshold.
     */
    public int getThreshold() {
        return threshold;
    }

    /**
     * Evaluates whether this condition is true.
     * @param modelIdentifier modelIdentifier of the current test sequence.
     * @param stateModelManager stateModelManager of the current test sequence.
     * @return True if condition is met.
     */
    public abstract boolean evaluate(String modelIdentifier, StateModelManager stateModelManager);
}
