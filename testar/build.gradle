plugins {
    id "de.undercouch.download" version "4.1.1"
}

apply plugin: 'application'

sourceSets {
    main {
        resources {
            srcDirs = ['resources']
            excludes = ['settings/']
        }
    }

    oracle {
        java {
            srcDirs =['resources/settings']
        }

        compileClasspath += main.output
        compileClasspath += main.compileClasspath
    }
}

/**
 * Task to run TESTAR using gradle
 * This task set the working directory to the install folder and runs testar.bat
 */
task runTestar(type: Exec) {
    // Make sure temp dir exists on case-sensitive OSs
    doFirst{
        new File("${project.buildDir}/install/testar/bin/output/temp").mkdirs()
    }

    group = 'custom_testar'
    description ='runTESTAR'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar.bat'

    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		environment "JAVA_TOOL_OPTIONS", "-Djava.awt.headless=false"
		commandLine "./testar"
	} else if (System.getProperty("os.name").toLowerCase().contains("linux")) {
		commandLine "./testar"
	} else {
		commandLine 'cmd', '/c', 'testar.bat'
	}
}

/*  There's error on Linux, crashing the JVM on unregistering the NativeHook
    For now, use the old version, 2.1.1 should fix the issue
    https://github.com/kwhat/jnativehook/issues/168
 */
def jnativehook = System.getProperty("os.name").toLowerCase() == "linux"
        ? 'com.1stleg:jnativehook:2.0.2'
        : 'com.1stleg:jnativehook:2.1.0'

task customZipDistribution(type: Zip) {
	doFirst{
		new File("${project.buildDir}/install/testar/bin/settings","desktop_generic.sse").text=""
	}
    group = 'custom_testar'
    description ='customZipDistribution'
    from 'target/install/testar'
    include '*'
   	include '*/**' //include subdirectories

   	archiveName 'testarDistribution.zip'
   	destinationDir(file('target/install'))
}

dependencies {
    compile project(':core')
    compile project(':native')
    compile project(':graphdb')
    compile files('./lib/jsyntaxpane-1.1.5.jar')
    compile files('./lib/sikulixapi.jar')
    compile files('./lib/eye2.jar')
    compile files('./lib/gson-2.8.5.jar')
    compile jnativehook
    compile 'com.google.guava:guava:26.0-jre'
    compile group: 'com.jgoodies', name: 'jgoodies-common', version: '1.8.1'
    compile group: 'com.jgoodies', name: 'jgoodies-forms', version: '1.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'jetty-annotations', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'apache-jsp', version: '9.4.30.v20200611'
    compile group: 'org.eclipse.jetty', name: 'apache-jstl', version: '9.4.30.v20200611'
    compile group: 'commons-io', name: 'commons-io', version: '2.7'
    runtime project(':windows')
}
evaluationDependsOn(':windows')

task prepareSettings(type: Copy) {
    from 'resources/settings'
    into 'target/scripts/settings'
}

task prepareSUTs(type: Copy) {
    from 'distributionSUTs'
    into 'target/scripts/suts'
}

task prepareOracles(type: Copy) {
    from 'target/classes/java/oracle'
    into 'target/scripts/settings'
}

task prepareOutputFolder(type: Copy) {
    from 'resources/output'
    into 'target/scripts/output'
}

/**
 * Copy existing testar/resources/windows10/windows.dll as temporally file
 */
task prepareCopyOfExistingWindows10dll(type: Copy) {
    from '../testar/resources/windows10'
    into 'target/scripts'
    include 'windows.dll'
}

/**
 * Copy windows.dll from the subproject windows into target scripts
 * so it can be used with the creation of the distribution.
 */
task prepareWindowsDLL(type: Copy) {
    if(new File('../windows/target/resources/main/windows.dll').exists()) {
        from '../windows/target/resources/main'
        into 'target/scripts'
        include 'windows.dll'
    }
}

applicationDistribution.from("../webdriver/resources/web-extension") {
    into "web-extension"
}

prepareOracles.dependsOn(oracleClasses)

/**
 * Set the arguments of the jvm in the start scripts.
 * To debug build TESTAR with the -DDEBUG=true.
 */
startScripts {
    if(System.getProperty('DEBUG', 'false') ) {
        applicationDefaultJvmArgs = ['-Dlog4j.configurationFile=log4j2.xml',
                                     '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005']
    } else {
        applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.xml"]
    }
    
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%\\\\lib\\\\\\*')
        winScriptFile.text = winFileText
    }
}

startScripts.dependsOn {
    tasks.findAll { task -> task.name.startsWith('prepare')}
}

//running testar requires the distribution to be installed.
runTestar.dependsOn(installDist)
customZipDistribution.dependsOn(installDist)

/**
 * Build TESTAR using Visual Studio Tools to create a windows.dll
 */
task windowsDistribution(dependsOn:['buildWindows','installDist','distZip']){
	group = 'distribution'
	description ='Build TESTAR distribution for Windows'
}

task buildWindows(type: Exec) {
    if( System.getProperty('os.name').toLowerCase().contains('windows 7')) {
        workingDir '../windows/native_src'
        commandLine 'cmd', '/c', 'compile_w7.bat'
    } else if( System.getProperty('os.name').toLowerCase().contains('windows')) {
        workingDir '../windows/native_src'
        commandLine 'cmd', '/c', 'compile_w10.bat'
    } else  {
        commandLine './dummy.sh'
    }
}
buildWindows.dependsOn classes

mainClassName='org.fruit.monkey.Main'


/**
 * Tasks to test TESTAR using gradle
 */
 
task init_workflow_test(type: Copy) {
    group = 'test_testar_workflow'
    description ='init_workflow_test'
    from 'resources/workflow/settings'
    into 'target/scripts/settings'
}

// Default COMMAND_LINE execution to run Notepad, execute 2 actions and verdict should be OK
task runTestDesktopGenericCommandLineOk(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineOk'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_ok" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad
// Test TagsForSuspiciousOracle feature using the UIATags.UIAAutomationId
// Force TESTAR to find a Suspicious Title (MenuBar widget)
// And verify it reading output command line
task runTestDesktopGenericCommandLineSuspiciousTitle(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineSuspiciousTitle'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_command_and_suspicious" TagsForSuspiciousOracle="NotExist;UIAAutomationId" SuspiciousTitles=".*MenuBar.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Verify MenuBar UIAAutomationId has been detected
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'UIAAutomationId' : 'MenuBar")}) {
            println "\n${output} \nTESTAR has successfully detected MenuBar Suspicious Title using TagsForSuspiciousOracle UIAAutomationId! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt detect MenuBar Suspicious Title using TagsForSuspiciousOracle UIAAutomationId")
        }
    }
}

// Default COMMAND_LINE execution to run Notepad
// Test TagsToFilter feature using the Tag.Desc
// Then force TESTAR to navigate and find a Suspicious Title Error (Script text)
// And verify it reading output command line
task runTestDesktopGenericCommandLineSettingsFilterSuspiciousTitle(type: Exec, dependsOn:'installDist') {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericCommandLineSettingsFilterSuspiciousTitle'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_command_settings_filter_and_suspicious" TagsToFilter="NotExist;Desc" ClickFilter=".*[sS]ystem.*|.*[cC]lose.*|.*[mM]inimize.*|.*[mM]aximize.*|Text Editor|File|Edit|View|Help|Word Wrap" SuspiciousTitles=".*[sS]cript.*" TimeToWaitAfterAction=2.0 ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=COMMAND_LINE SUTConnectorValue="C:\\\\Windows\\\\System32\\\\notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Verify Script title has been detected
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Script")}) {
            println "\n${output} \nTESTAR has successfully filtered using TagsToFilter Desc and detected Script Suspicious Title! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt filter using TagsToFilter Desc")
        }
    }
}

// Help task to run Notepad before start TESTAR (to connect with process or title)
task runNotepad {
    group = 'test_testar_workflow'
    description ='runNotepad'
    doFirst{
        ext.process = new ProcessBuilder().command('cmd', '/c', 'C:\\Windows\\System32\\notepad.exe').start()
    }
}

// Verify that TESTAR correctly connects using process name
// To be sure, connect to process and detect Format suspicious title
task runTestDesktopGenericProcessNameSuspiciousTitle(type: Exec, dependsOn:['installDist','runNotepad']) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericProcessNameSuspiciousTitle'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_process_and_suspicious" SuspiciousTitles=".*[fF]ormat.*|.*[fF]ormato.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=SUT_PROCESS_NAME SUTConnectorValue="notepad.exe" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Format (for English and Spanish)
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Format")}) {
            println "\n${output} \nTESTAR has successfully connect with SUT_PROCESS_NAME and detected Format Suspicious Title! "
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
        } else {
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with SUT_PROCESS_NAME")
        }
    }
}

// Verify that TESTAR correctly connects using windows title
// To be sure, connect with windows title and detect Format suspicious title
task runTestDesktopGenericTitleNameSuspiciousTitle(type: Exec, dependsOn:['installDist','runNotepad']) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestDesktopGenericTitleNameSuspiciousTitle'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_desktop_generic AlwaysCompile=true ApplicationName="notepad_title_and_suspicious" SuspiciousTitles=".*[fF]ormat.*|.*[fF]ormato.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate SUTConnector=SUT_WINDOW_TITLE SUTConnectorValue="Notepad" Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Format (for English and Spanish)
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'Title' : 'Format")}) {
            println "\n${output} \nTESTAR has successfully connect with SUT_WINDOW_TITLE and detected Format Suspicious Title! "
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
        } else {
            // kill notepad process
            ext.process = new ProcessBuilder().command('cmd', '/c', 'taskkill /IM notepad.exe').start()
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with SUT_WINDOW_TITLE")
        }
    }
}

// Download last win32 chromedriver 
task downloadChromedriver(type: Download, dependsOn: installDist) {
    group = 'test_testar_workflow'
    description ='downloadChromedriver'
    
    // Disable for non-Windows environments (Linux, osx)
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        return;
    }
    
    ProcessBuilder builder = new ProcessBuilder().command('cmd', '/c', 'curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE');
    Process process = builder.start();
    process.waitFor()
    
    src 'https://chromedriver.storage.googleapis.com/' + process.text + '/chromedriver_win32.zip'
    dest 'target/install/testar/bin'
    overwrite false
}

// Extract Chromedriver from downloaded file
task downloadAndUnzipChromedriver(type: Copy, dependsOn: downloadChromedriver) {
    group = 'test_testar_workflow'
    description ='downloadAndUnzipChromedriver'
    
    // Disable for non-Windows environments (Linux, osx)
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        return;
    }
    
    from zipTree(new File(downloadChromedriver.dest, 'chromedriver_win32.zip'))
    into downloadChromedriver.dest
}

// Verify that TESTAR correctly executes chromedriver
// To be sure, connect to ou.nl and detect Onderwijs suspicious title
task runTestWebdriverSuspiciousTitle(type: Exec, dependsOn: downloadAndUnzipChromedriver) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverSuspiciousTitle'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_generic AlwaysCompile=true ApplicationName="webdriver_and_suspicious" TagsForSuspiciousOracle="NotExist;ValuePattern" SuspiciousTitles=".*[oO]nderwijs.*" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=2'
    doLast {
        String output = standardOutput.toString()

		// Use Onderwijs
        if(output.readLines().any{line->line.contains("Discovered suspicious widget 'ValuePattern' : 'https://www.ou.nl/onderwijs")}) {
            println "\n${output} \nTESTAR has successfully connect with WEB_DRIVER and detected Onderwijs Suspicious Title! "
        } else {
            throw new GradleException("\n${output} \nERROR: TESTAR didnt connect with WEB_DRIVER")
        }
    }
}

// Connect to para.testar.org and make a login
task runTestWebdriverParabankLogin(type: Exec, dependsOn: downloadAndUnzipChromedriver) {
	// Read command line output
    standardOutput = new ByteArrayOutputStream()
    group = 'test_testar_workflow'
    description ='runTestWebdriverParabankLogin'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar sse=test_gradle_workflow_webdriver_parabank AlwaysCompile=true ApplicationName="webdriver_login" ShowVisualSettingsDialogOnStartup=false Mode=Generate Sequences=1 SequenceLength=1 ProtocolSpecificSetting_1=john ProtocolSpecificSetting_2=demo'
    doLast {
        String output = standardOutput.toString()

		// Check that output contains No problem detected. message to verify the correct execution
        if(output.readLines().any{line->line.contains("No problem detected.")}) {
            println "\n${output} \nTESTAR has been executed sucessfully"
        } else {
            throw new GradleException("\n${output} \nERROR: Executing TESTAR")
        }
    }
}
