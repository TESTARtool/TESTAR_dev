apply plugin: 'application'

sourceSets {
    main {
        resources {
            srcDirs = ['resources']
            excludes = ['settings/']
        }
    }

    oracle {
        java {
            srcDirs =['resources/settings']
        }

        compileClasspath += main.output
        compileClasspath += main.compileClasspath
    }
}

/**
 * Task to run TESTAR using gradle
 * This task set the working directory to the install folder and runs testar.bat
 * Note this version only works on Windows.
 */
task runTestar(type: Exec) {
    group = 'custom_testar'
    description ='runTESTAR'
    workingDir 'target/install/testar/bin'
    commandLine 'cmd', '/c', 'testar.bat'
}

dependencies {
    compile project(':core')
    compile project(':native')
    compile project(':graph')
    compile project(':graphdb')
    compile files('./lib/jsyntaxpane-1.1.5.jar')
    compile files('./lib/JNativeHook.jar')
    runtime project(':windows')
    runtime files('../graph/lib/jiprolog-4.1.3.1.jar')
    runtime files('../graph/lib/jgrapht-ext-1.0.1-uber.jar')
    runtime files('../graph/lib/com.alexmerz.graphviz.jar')
    runtime files('../graph/lib/json-simple-1.1.1.jar')
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.2'
}
evaluationDependsOn(':windows')

task prepareSettings(type: Copy) {
    from 'resources/settings'
    into 'target/scripts/settings'
}

task prepareOracles(type: Copy) {
    from 'target/classes/java/oracle'
    into 'target/scripts/settings'
}

task prepareOutputFolder(type: Copy) {
    from 'resources/output'
    into 'target/scripts/output'
}

/**
 * Copy windows.dll from the subproject windows into target scripts
 * so it can be used with the creation of the distribution.
 */
task prepareWindowsDLL(type: Copy) {
    from '../windows/target/resources/main'
    into 'target/scripts'
    include 'windows.dll'
}

task prepareNativeDLL(type: Copy) {
    from 'resources/windows/x86_64'
    into 'target/scripts'
}

prepareOracles.dependsOn(oracleClasses)

/**
 * Set the arguments of the jvm in the start scripts.
 * To debug build TESTAR with the -DDEBUG=true.
 */
startScripts {
    if(System.getProperty('DEBUG', 'false') ) {
        applicationDefaultJvmArgs = ["-Dlogback.configurationFile=logback.xml",
                                     '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005']
    } else {
        applicationDefaultJvmArgs = ["-Dlogback.configurationFile=logback.xml"]
    }
}

startScripts.dependsOn {
    tasks.findAll { task -> task.name.startsWith('prepare')}
}

//running testar requires the distribution to be installed.
runTestar.dependsOn(installDist)

mainClassName='org.fruit.monkey.Main'
