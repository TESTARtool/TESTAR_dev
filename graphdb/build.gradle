
plugins {
    id "io.morethan.jmhreport" version "0.6.2.1"
}

sourceSets {
    jmh {
        java {
            srcDirs = ['jmh/java']
        }
    }
}


jmhReport {
    jmhResultPath = project.file('target/reports/jmh/result.json')
    jmhReportOutput = project.file('target/reports/jmh')
}

dependencies {
    compile project(':core')
    compile group: 'com.orientechnologies', name: 'orientdb-graphdb', version: '2.2.29'
    compile group: 'com.tinkerpop.gremlin', name: 'gremlin-java', version: '2.6.0'
    compile group: 'com.tinkerpop.gremlin', name: 'gremlin-groovy', version: '2.6.0'
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '1.8.9'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    jmhCompile project
    jmhCompile 'org.openjdk.jmh:jmh-core:1.19'
    jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.19'
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include','')
    def format = project.properties.get('format','text')
    def resultFile = file("target/reports/jmh/result.${format}")
    resultFile.parentFile.mkdirs()

    args include
    args '-rf', format
    args '-rff', resultFile
}

task jmhFormats(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    args '-lrf'
}
