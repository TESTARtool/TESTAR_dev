
plugins {
    id "io.morethan.jmhreport" version "0.6.2.1"
}

sourceSets {
    jmh {
        java {
            srcDirs = ['jmh/java']
        }
    }
}


jmhReport {
    jmhResultPath = project.file('target/reports/jmh/result.json')
    jmhReportOutput = project.file('target/reports/jmh')
}

dependencies {
    implementation project(':core')
    implementation group: 'com.orientechnologies', name: 'orientdb-graphdb', version: '3.0.34'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.15.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.15.0'
    //implementation group: 'com.tinkerpop.gremlin', name: 'gremlin-java', version: '2.6.0'
    //implementation group: 'com.tinkerpop.gremlin', name: 'gremlin-groovy', version: '2.6.0'
    //implementation group: 'org.codehaus.groovy', name: 'groovy', version: '1.8.9'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    jmhImplementation project
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.19'
    jmhImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.19'
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include','')
    def format = project.properties.get('format','text')
    def resultFile = file("target/reports/jmh/result.${format}")
    resultFile.parentFile.mkdirs()

    args include
    args '-rf', format
    args '-rff', resultFile
}

task jmhFormats(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    args '-lrf'
}
